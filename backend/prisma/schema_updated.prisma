generator client {
  provider = "prisma-client-js"
}

/// @seed="npm run prisma:seed"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        String
  customers   Customer[]
  contacts    Contact[]
  tasks       Task[]
  leads       Lead[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  updatedBy   User?     @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  updatedUsers User[]   @relation("UserUpdatedBy")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  company   String?
  address   String?
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  contacts  Contact[]
  leads     Lead[]
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  type        String
  summary     String
  contactDate DateTime
  createdAt   DateTime @default(now())
}

model Lead {
  id         Int        @id @default(autoincrement())
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId Int
  stage      LeadStage  @relation(fields: [stageId], references: [id])
  stageId    Int
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    Int
  value      Float?
  source     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tasks      Task[]
}

model LeadStage {
  id    Int    @id @default(autoincrement())
  name  String
  order Int
  leads Lead[]
}

model Task {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId Int
  lead       Lead?     @relation(fields: [leadId], references: [id])
  leadId     Int?
  title      String
  description String?
  dueDate    DateTime
  completed  Boolean   @default(false)
  createdAt  DateTime  @default(now())
} 